const OWNER_ID = "100092006324917";

module.exports.config = {
  name: "database",
  version: "1.0.0",
  hasPermssion: 2,
  credits: "TOHI-BOT-HUB",
  description: "Database management commands",
  commandCategory: "ADMIN",
  usages: "[backup|sync|status|export]",
  cooldowns: 5,
  usePrefix: true
};

module.exports.run = async function({ api, event, args }) {
  const { threadID, messageID, senderID } = event;

  if (senderID !== OWNER_ID) {
    return api.sendMessage(`тЫФя╕П рж╢рзБржзрзБржорж╛рждрзНрж░ owner (${OWNER_ID}) ржПржЗ ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржи!`, threadID, messageID);
  }

  const command = (args[0] || "status").toLowerCase();
  const PostgreSQL = require('../../includes/database/postgresql')();
  const dataSync = require('../../utils/syncData');

  try {
    switch (command) {
      case "status":
        const config = require('../../config.json');
        const databaseUrl = config.DATABASE?.DATABASE_URL || process.env.DATABASE_URL;

        if (!databaseUrl) {
          return api.sendMessage("тЭМ DATABASE_URL config.json ржЕржержмрж╛ environment ржП ржирзЗржЗ!", threadID, messageID);
        }

        try {
          const [users, threads, approvedGroups] = await Promise.all([
            PostgreSQL.getAllUsers(),
            PostgreSQL.getAllThreads(),
            PostgreSQL.getApprovedGroups()
          ]);

          const status = `ЁЯУК ржбрж╛ржЯрж╛ржмрзЗрж╕ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕:

ЁЯПк PostgreSQL: тЬЕ рж╕ржВржпрзБржХрзНржд
ЁЯСе ржорзЛржЯ ржЗржЙржЬрж╛рж░: ${users.length}
ЁЯПШя╕П ржорзЛржЯ ржерзНрж░рзЗржб: ${threads.length}
тЬЕ ржЕржирзБржорзЛржжрж┐ржд ржЧрзНрж░рзБржк: ${approvedGroups.length}

ЁЯУЭ ржЧрзНрж▓рзЛржмрж╛рж▓ ржХрзНржпрж╛рж╢:
ЁЯСд allUserID: ${global.data.allUserID.length}
ЁЯПа allThreadID: ${global.data.allThreadID.length}
ЁЯТ░ allCurrenciesID: ${global.data.allCurrenciesID.length}

ЁЯТ╛ рж╕ржмржХрж┐ржЫрзБ рж╕ржВрж░ржХрзНрж╖рж┐ржд ржПржмржВ bot restart ржПрж░ ржкрж░ ржерзЗржХрзЗ ржпрж╛ржмрзЗ!`;

          return api.sendMessage(status, threadID, messageID);
        } catch (error) {
          return api.sendMessage(`тЭМ ржбрж╛ржЯрж╛ржмрзЗрж╕ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ ржЪрзЗржХ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛: ${error.message}`, threadID, messageID);
        }

      case "backup":
        api.sendMessage("ЁЯФД рж╕ржм ржбрж╛ржЯрж╛ PostgreSQL ржП backup ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...", threadID, messageID);

        const backupResult = await dataSync.backupToPostgreSQL();
        if (backupResult) {
          return api.sendMessage("тЬЕ рж╕ржм ржбрж╛ржЯрж╛ рж╕ржлрж▓ржнрж╛ржмрзЗ PostgreSQL ржП backup рж╣ржпрж╝рзЗржЫрзЗ!", threadID, messageID);
        } else {
          return api.sendMessage("тЭМ Backup ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ!", threadID, messageID);
        }

      case "sync":
        api.sendMessage("ЁЯФД PostgreSQL ржерзЗржХрзЗ рж╕ржм ржбрж╛ржЯрж╛ sync ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...", threadID, messageID);

        const syncResult = await dataSync.syncFromPostgreSQL();
        if (syncResult) {
          return api.sendMessage("тЬЕ рж╕ржм ржбрж╛ржЯрж╛ рж╕ржлрж▓ржнрж╛ржмрзЗ sync рж╣ржпрж╝рзЗржЫрзЗ!", threadID, messageID);
        } else {
          return api.sendMessage("тЭМ Sync ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ!", threadID, messageID);
        }

      case "export":
        if (!process.env.DATABASE_URL) {
          return api.sendMessage("тЭМ DATABASE_URL ржирзЗржЗ!", threadID, messageID);
        }

        const exportData = await PostgreSQL.backupAllData();
        if (exportData) {
          const fs = require('fs').promises;
          const exportPath = `./backup_${Date.now()}.json`;
          await fs.writeFile(exportPath, JSON.stringify(exportData, null, 2));

          return api.sendMessage(`тЬЕ рж╕ржм ржбрж╛ржЯрж╛ ржПржХрзНрж╕ржкрзЛрж░рзНржЯ рж╣ржпрж╝рзЗржЫрзЗ: ${exportPath}

ЁЯУК ржПржХрзНрж╕ржкрзЛрж░рзНржЯ ржбрж╛ржЯрж╛:
ЁЯСе ржЗржЙржЬрж╛рж░: ${exportData.users.length}
ЁЯПШя╕П ржерзНрж░рзЗржб: ${exportData.threads.length}
ЁЯТ░ ржХрж╛рж░рзЗржирзНрж╕рж┐: ${exportData.currencies.length}
тЬЕ ржЕржирзБржорзЛржжрж┐ржд ржЧрзНрж░рзБржк: ${exportData.approvedGroups.length}`, threadID, messageID);
        } else {
          return api.sendMessage("тЭМ ржбрж╛ржЯрж╛ ржПржХрзНрж╕ржкрзЛрж░рзНржЯ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛!", threadID, messageID);
        }

      default:
        return api.sendMessage(`тЭМ ржЕржЬрж╛ржирж╛ ржХржорж╛ржирзНржб! ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи:
/database status - ржбрж╛ржЯрж╛ржмрзЗрж╕ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕
/database backup - рж▓рзЛржХрж╛рж▓ ржбрж╛ржЯрж╛ PostgreSQL ржП backup
/database sync - PostgreSQL ржерзЗржХрзЗ ржбрж╛ржЯрж╛ sync
/database export - рж╕ржм ржбрж╛ржЯрж╛ JSON ржлрж╛ржЗрж▓рзЗ ржПржХрзНрж╕ржкрзЛрж░рзНржЯ`, threadID, messageID);
    }
  } catch (error) {
    console.error("Database command error:", error);
    return api.sendMessage(`тЭМ ржХржорж╛ржирзНржб ржПрж░рж░: ${error.message}`, threadID, messageID);
  }
};
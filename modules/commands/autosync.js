
const OWNER_ID = "100092006324917";

module.exports.config = {
  name: "autosync",
  version: "1.0.0", 
  hasPermssion: 2,
  credits: "TOHI-BOT-HUB",
  description: "Auto database sync control",
  commandCategory: "ADMIN",
  usages: "[start|stop|status|sync|restore]",
  cooldowns: 5,
  usePrefix: true
};

module.exports.run = async function({ api, event, args }) {
  const { threadID, messageID, senderID } = event;

  if (senderID !== OWNER_ID) {
    return api.sendMessage(`тЫФя╕П рж╢рзБржзрзБржорж╛рждрзНрж░ owner ржПржЗ ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржи!`, threadID, messageID);
  }

  const autoSync = require('../../utils/autoSyncDatabase');
  const command = (args[0] || "status").toLowerCase();

  try {
    switch (command) {
      case "start":
        autoSync.startAutoSync();
        return api.sendMessage("тЬЕ Auto-sync ржЪрж╛рж▓рзБ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ! ржкрзНрж░рждрж┐ 2 ржорж┐ржирж┐ржЯ ржкрж░ ржкрж░ data PostgreSQL ржП save рж╣ржмрзЗред", threadID, messageID);

      case "stop":
        autoSync.stopAutoSync();
        return api.sendMessage("тП╣я╕П Auto-sync ржмржирзНржз ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред", threadID, messageID);

      case "status":
        const status = autoSync.getStatus();
        const statusMsg = `ЁЯУК Auto-Sync Status:

ЁЯФД ржЪрж╛рж▓рзБ ржЖржЫрзЗ: ${status.isRunning ? "тЬЕ рж╣рзНржпрж╛ржБ" : "тЭМ ржирж╛"}
ЁЯЧДя╕П PostgreSQL: ${status.postgresAvailable ? "тЬЕ Connected" : "тЭМ Not Available"}
тП░ ржкрж░ржмрж░рзНрждрзА sync: ${status.nextSyncIn}

ЁЯТб Commands:
тАв /autosync start - Auto-sync ржЪрж╛рж▓рзБ ржХрж░рзБржи
тАв /autosync stop - Auto-sync ржмржирзНржз ржХрж░рзБржи
тАв /autosync sync - ржПржЦржиржЗ sync ржХрж░рзБржи
тАв /autosync restore - Database ржерзЗржХрзЗ restore ржХрж░рзБржи`;

        return api.sendMessage(statusMsg, threadID, messageID);

      case "sync":
        api.sendMessage("ЁЯФД PostgreSQL ржП data sync ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...", threadID, messageID);
        const syncResult = await autoSync.syncToPostgreSQL();
        
        if (syncResult) {
          return api.sendMessage("тЬЕ рж╕ржм data рж╕ржлрж▓ржнрж╛ржмрзЗ PostgreSQL ржП sync рж╣ржпрж╝рзЗржЫрзЗ!", threadID, messageID);
        } else {
          return api.sendMessage("тЭМ Data sync ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ!", threadID, messageID);
        }

      case "restore":
        api.sendMessage("ЁЯФД PostgreSQL ржерзЗржХрзЗ data restore ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...", threadID, messageID);
        const restoreResult = await autoSync.syncFromPostgreSQL();
        
        if (restoreResult) {
          return api.sendMessage("тЬЕ рж╕ржм data рж╕ржлрж▓ржнрж╛ржмрзЗ PostgreSQL ржерзЗржХрзЗ restore рж╣ржпрж╝рзЗржЫрзЗ!", threadID, messageID);
        } else {
          return api.sendMessage("тЭМ Data restore ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ!", threadID, messageID);
        }

      default:
        return api.sendMessage("тЭМ ржЕржмрзИржз command! ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи: start, stop, status, sync, restore", threadID, messageID);
    }
  } catch (error) {
    console.error("Auto-sync command error:", error);
    return api.sendMessage(`тЭМ Error: ${error.message}`, threadID, messageID);
  }
};
